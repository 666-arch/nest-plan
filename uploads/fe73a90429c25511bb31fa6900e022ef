# Airt-socketio-client

1. 基于socket.io-client, 与Airt-socket-server通信的React组件
2. Typescript编写，提供类型导出

## 安装（还没发包，本地找蔡文轩拷下）

// 推荐使用pnpm

```powershell
pnpm add @airt/airt-socketio-client
```



## 使用

### AirtsocketClient 初始化配置

```tsx
// filename: ./src/main.tsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'
import AirSocketProvider from './es/airtSocket/AirtSocketProvider'

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <AirSocketProvider config={{
    UserRole: "Controller",
    namespace: "/AIRT",
    port: "8040",
  }}>
    <React.StrictMode>
      <App />
    </React.StrictMode>
  </AirSocketProvider>,
)

```



#### AirtSocketProviderConfig

| 参数        | 说明           | 类型      | 是否必须 | 默认值                                   |
| --------- | ------------ | ------- | ---- | ------------------------------------- |
| UserRole  | 客户端连接角色      | string  | 是    |                                       |
| hostname  | 连接IP/域名      | string  | 否    | window.location.hostname \| 127.0.0.1 |
| port      | 端口号          | string  | 否    | ”8070“                                |
| namespace | socketio命名空间 | string  | 否    | ”/AIRT“                               |
| UserGroup | 房间           | string  | 否    | ”Airt-Channel“                        |
| devtool   | 是否开启调试       | boolean | 否    | false                                 |





### useSocket

在AirSocketProvider中，可以使用useSocket获取AirtSocketClient实例进行通信

#### 发送消息 (airtEmit)

```tsx
import { useState } from 'react'
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'

import './App.css'
import { useSocket } from './es/airtSocket';



function App() {
  const [count, setCount] = useState<number>(0);
  // const [socket, setSocket] = useState<socketIO.Socket | null>(null);
  const socket = useSocket()

  const handleAddCount = () => {
    socket && socket.airtEmit({
      Entity: "Client",
      // 发送给Web客户端，如要发送给UE端则用NativeAPI
      WebAPI: {
        setNum :{ 
          Description: "",
          Parms: {
            num: count + 1
          }
        }
      }
    });
    setCount(count + 1)
  }

  return (
    <>
      <div>
        <a href="https://vitejs.dev" target="_blank">
          <img src={viteLogo} className="logo" alt="Vite logo" />
        </a>
        <a href="https://react.dev" target="_blank">
          <img src={reactLogo} className="logo react" alt="React logo" />
        </a>
      </div>
      <h1>Vite + React</h1>
      <div className="card">
        <button onClick={handleAddCount}>
          count is {count}
        </button>
        <p>
          Edit <code>src/App.tsx</code> and save to test HMR
        </p>
      </div>
      <p className="read-the-docs">
        Click on the Vite and React logos to learn more
      </p>
    </>
  )
}

export default App

```

##### airtSocket

| 参数        | 说明               | 类型                           | 是否必填 |
| --------- | ---------------- | ---------------------------- | ---- |
| Entity    | 实体名称，接收消息的目标角色名称 | string                       | 是    |
| WebAPI    | 发送给Web客户端时带上     | { [key : string] : APIInfo } | 否    |
| NativeAPI | 发送给UE客户端时带上      | { [key : string] : APIInfo } | 否    |

##### APIInfo

| 参数          | 说明                  | 类型     | 是否必填 |
| ----------- | ------------------- | ------ | ---- |
| Parms       | 消息内容，API所需的JSON参数对象 | object | 是    |
| Description | API描述               | string | 否    |



#### 接收消息(registerAPI)

```tsx
import { useEffect, useState } from 'react'
import './App.css'
import { useSocket } from './es/airtSocket';


function App() {
  const [count, setCount] = useState<number>(0);
  // const [socket, setSocket] = useState<socketIO.Socket | null>(null);
  const socket = useSocket();

  useEffect(() => {
    if(socket) {
      socket.registerAPI("setNum", (data) => {
        console.log(data)
        setCount(data.num)
      });
      console.dir(socket.entity)
    }
  }, [socket])



  return (
    <>
      <span>{count}</span>
    </>
  )
}

export default App
```

##### registerAPI

| 参数       | 说明                         | 类型                                        | 是否必须                |
| -------- | -------------------------- | ----------------------------------------- | ------------------- |
| apiName  | 注册API的名称，或者{API名称：回调函数}的对象 | string \| { [ key : string ] : function } | 是                   |
| callback | api调用时回调                   | function                                  | 当apiName为string时可必填 |


